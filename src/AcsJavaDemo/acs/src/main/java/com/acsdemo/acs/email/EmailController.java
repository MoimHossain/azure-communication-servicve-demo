
package com.acsdemo.acs.email;

import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.core.env.Environment;
import org.springframework.beans.factory.annotation.Autowired;

import java.time.Duration;
import com.azure.communication.email.EmailClientBuilder;
import com.acsdemo.acs.AzureCredentailHelper;
import com.azure.communication.email.models.EmailSendResult;
import com.azure.communication.email.models.EmailSendStatus;
import com.azure.communication.email.models.EmailMessage;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.polling.LongRunningOperationStatus;
import com.azure.core.util.polling.PollResponse;


@RestController
@RequestMapping(path = "/emails")
public class EmailController {
    public static final Duration POLLER_WAIT_TIME = Duration.ofSeconds(10);

    @Autowired
    private Environment environment;


	@PostMapping(path= "/", consumes = "application/json", produces = "application/json")
	public EmailSendResponse sendEmail(@RequestBody EmailPayload email) throws Exception 
	{        
        var responseString = "";
        try {

            var senderAddress = environment.getProperty("ACS_SENDER_EMAIL");
            var acsEndpoint = environment.getProperty("ACS_ENDPOINT");
            var azureCredentailHelper = new AzureCredentailHelper(environment);
            var credential = azureCredentailHelper.getCredential();

            var client = new EmailClientBuilder()
                .endpoint(acsEndpoint)
                .credential(credential)
                .buildClient();
            EmailMessage emailMessage = new EmailMessage()
                .setSenderAddress(senderAddress)
                .setToRecipients(email.to())
                .setSubject(email.subject())
                .setBodyPlainText(email.content());
            SyncPoller<EmailSendResult, EmailSendResult> poller = client.beginSend(emailMessage);           

            PollResponse<EmailSendResult> pollResponse = null;
            Duration timeElapsed = Duration.ofSeconds(0);

             while (pollResponse == null
                     || pollResponse.getStatus() == LongRunningOperationStatus.NOT_STARTED
                     || pollResponse.getStatus() == LongRunningOperationStatus.IN_PROGRESS)
             {
                 pollResponse = poller.poll();
                 System.out.println("Email send poller status: " + pollResponse.getStatus());

                 Thread.sleep(POLLER_WAIT_TIME.toMillis());
                 timeElapsed = timeElapsed.plus(POLLER_WAIT_TIME);

                 if (timeElapsed.compareTo(POLLER_WAIT_TIME.multipliedBy(18)) >= 0)
                 {
                     throw new RuntimeException("Polling timed out.");
                 }
             }

             if (poller.getFinalResult().getStatus() == EmailSendStatus.SUCCEEDED)
             {
                responseString = String.format("Successfully sent the email (operation id: %s)", poller.getFinalResult().getId());                
             }
             else
             {
                responseString = poller.getFinalResult().getError().getMessage();                 
             }            
        } 
        catch (Exception e) {
            responseString = e.getMessage();
            System.out.println(e.getMessage());
        }
        return new EmailSendResponse(responseString);
	}
}